package com.min.controller.myquestion;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.min.domain.MyQuestion;
import com.min.myquestion.service.MyQuestionService;

@Controller
public class MyQuestionController {
	
	@Autowired
	private MyQuestionService myQuestionService;
	
	@RequestMapping("/lecture/registquestion.do")
	public ModelAndView selectListOfLecture( @RequestBody Map<String, Object> map, HttpServletResponse res ){
		
		int member_id = Integer.parseInt(req.getParameter("member_id"));
		int lecture_id = Integer.parseInt(req.getParameter("lecture_id"));
		
		myQuestionService.selectListOfLecture(member_id, lecture_id);
		
		ModelAndView mav = new ModelAndView();
		
		return mav;
		
	}
	
	@RequestMapping("/lecture/registquestion.do")
	@ResponseBody
	public void insertOne(@RequestBody Map<String, Object> map, HttpServletResponse res){
		
		MyQuestion myQuestion = new MyQuestion();
		
		myQuestion.setLecture_id(Integer.parseInt(map.get("lecture_id").toString()));
		myQuestion.setMember_id(Integer.parseInt(map.get("member_id").toString()));
		myQuestion.setWriter(map.get("writer").toString());
		myQuestion.setContent(map.get("content").toString());
		myQuestion.setTeam(Integer.parseInt(map.get("team").toString()));
		
		myQuestionService.insert(myQuestion);
		
	}
	
	@RequestMapping("/lecture/updatequestion.do")
	@ResponseBody
	public void updateOne(@RequestBody Map<String, Object> map, HttpServletResponse res){
		
		MyQuestion myQuestion = new MyQuestion();
		
		myQuestion.setLecture_id(Integer.parseInt(map.get("lecture_id").toString()));
		myQuestion.setMember_id(Integer.parseInt(map.get("member_id").toString()));
		myQuestion.setWriter(map.get("writer").toString());
		myQuestion.setContent(map.get("content").toString());
		myQuestion.setTeam(Integer.parseInt(map.get("team").toString()));
		
		myQuestionService.update(myQuestion);
		
	}
	
	@RequestMapping("/lecture/deletequestion.do")
	@ResponseBody
	public void deleteOne(@RequestBody Map<String, Object> map, HttpServletResponse response){

		int myquestion_id = Integer.parseInt(map.get("myquestion_id").toString());
		
		myQuestionService.delete(myquestion_id);
		
	}

}
